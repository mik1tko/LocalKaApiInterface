openapi: "3.0.0"
info:
  title: API Title
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  /auth:
    get:
      tags: [Authentication]
      security:
        - BasicAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseBody"

  # mark: users
  /users/{id}:
    get:
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  # TODO: remove it
  /users:
    post:
      tags: [UsersOptional]
      security:
        - BearerAuthOptional: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestBody"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/batch:
    post:
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - users
              properties:
                channels:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object 
                additionalProperties: 
                  $ref: "#/components/schemas/User"

  # mark: chats
  /chats:
    get:
      tags: [Chats]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"

    post:
      tags: [Chats]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"

  # mark: messages

  /chats/{chat_id}:
    get:
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: before_id
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

    post:
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostMessage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /chats/messages/batch:
    post:
      tags: [Messages]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - channels
              properties:
                channels:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object 
                additionalProperties: 
                  $ref: "#/components/schemas/Message"

  /users/{id}/direct:
    post:
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostMessage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

    get:
      tags: [Chats]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
        "204":
          description: direct with user not yet created

components:
  securitySchemes:
    BearerAuthOptional:
      type: http
      scheme: bearer
    BearerAuth:
      type: http
      scheme: bearer
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    User:
      type: object
      required:
        - id
        - username
        - create_at
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        avatar:
          type: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time

    CreateUserRequestBody:
      type: object
      additionalProperties: false
      required:
        - username
      properties:
        username:
          type: string
        name:
          type: string
        avatar:
          type: string

    Chat:
      type: object
      required:
        - id
        - create_at
        - update_at
        - type
      properties:
        id:
          type: string
          format: uuid
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
        last_message_at:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/ChatType"
        name:
          type: string
          description: Всегда есть у типов channel и group
        image:
          type: string
          description: Всегда есть у типов channel и group
        creator_id:
          type: string
          format: uuid
          description: Для group
        user_id:
          type: string
          format: uuid
          description: Всегда есть у типа direct
        is_public:
          type: boolean
          description: для channel и group


    Position:
      type: object
      required:
        - id
        - create_at
        - name
        - creator_id
        - is_public
        - type
      properties:
        id:
          type: string
        create_at:
          type: string
          format: date-time
        name:
          type: string
        creator_id:
          type: string
        is_public:
          type: boolean
        type:
          type: string
          enum:
            - point
            - area
        area:
          type: object
          properties:
            top_left:
              $ref: "#/components/schemas/Point"
            bottom_right:
              $ref: "#/components/schemas/Point"

        point:
          $ref: "#/components/schemas/Point"

    Point:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    Message:
      type: object
      required:
        - id
        - create_at
      properties:
        id:
          type: integer
        sender_id:
          type: string
          format: uuid
          description: пока есть везде
        text:
          type: string
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time

    PostMessage:
      type: object
      required:
        - text
      properties:
        text:
          type: string

    CreateChatBody:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ChatType"
        name:
          type: string
          description: Всегда есть у типов channel и group
        image:
          type: string
          description: Всегда есть у типов channel и group
        user_id:
          type: string
          description: Всегда есть у типа direct
        is_public:
          type: boolean
          description: для channel и group

    ChatType:
      type: string
      enum:
        - direct
        - channel
        - group

    AuthResponseBody:
      type: object
      required:
        - token
      additionalProperties: false
      properties:
        token:
          type: string
